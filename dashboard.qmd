---
title: "Catatonia-ID Survey Dashboard"
format: 
  html:
    theme: cosmo
    toc: false
    page-layout: full
    css: |
      .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        padding: 10px;
      }
      .metric-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .metric-number {
        font-size: 2.5em;
        font-weight: bold;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
      }
      .metric-label {
        font-size: 0.9em;
        margin: 5px 0 0 0;
        opacity: 0.9;
      }
---

```{r}
#| label: setup
#| include: false
library(DT)
library(plotly)
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(reactable)
library(htmltools)

# Load data - try multiple file options
if (file.exists("anonymized_survey_data.csv")) {
  survey_data <- read_csv("anonymized_survey_data.csv", show_col_types = FALSE)
} else if (file.exists("mock_catatonia_id_survey_data.csv")) {
  survey_data <- read_csv("mock_catatonia_id_survey_data.csv", show_col_types = FALSE)
} else {
  # Create empty data structure
  survey_data <- tibble(
    ResponseId = character(0),
    Progress = numeric(0),
    Finished = logical(0),
    RecordedDate = as.POSIXct(character(0)),
    Q1_Main_Role = character(0)
  )
}

# Data processing
if (nrow(survey_data) > 0) {
  survey_data <- survey_data %>%
    mutate(
      RecordedDate = as.Date(RecordedDate),
      Duration_minutes = if("Duration" %in% names(.)) Duration / 60 else NA,
      Role_Clean = case_when(
        Q1_Main_Role == "Medical provider (like a psychiatrist or pediatrician)" ~ "Medical Provider",
        Q1_Main_Role == "Person with intellectual disability" ~ "Person with ID",
        is.na(Q1_Main_Role) ~ "Unknown",
        TRUE ~ Q1_Main_Role
      )
    )
  
  # Summary statistics
  total_responses <- nrow(survey_data)
  completed <- sum(survey_data$Finished, na.rm = TRUE)
  completion_rate <- round(mean(survey_data$Finished, na.rm = TRUE) * 100, 1)
  avg_time <- round(mean(survey_data$Duration_minutes[survey_data$Finished], na.rm = TRUE), 1)
  responses_today <- sum(survey_data$RecordedDate == Sys.Date(), na.rm = TRUE)
  responses_7days <- sum(survey_data$RecordedDate >= Sys.Date() - 6, na.rm = TRUE)
} else {
  total_responses <- 0
  completed <- 0
  completion_rate <- 0
  avg_time <- 0
  responses_today <- 0
  responses_7days <- 0
}
```

# Survey Overview

## Response Summary

```{r}
#| label: summary-metrics
if (total_responses > 0) {
  div(
    class = "metric-container",
    
    div(class = "metric-box",
      h3(class = "metric-number", total_responses),
      p(class = "metric-label", "Total Responses")
    ),
    
    div(class = "metric-box",
      h3(class = "metric-number", paste0(completion_rate, "%")),
      p(class = "metric-label", "Completion Rate")
    ),
    
    div(class = "metric-box",
      h3(class = "metric-number", completed),
      p(class = "metric-label", "Completed Surveys")
    ),
    
    div(class = "metric-box",
      h3(class = "metric-number", paste0(avg_time, " min")),
      p(class = "metric-label", "Avg. Time")
    ),
    
    div(class = "metric-box",
      h3(class = "metric-number", responses_today),
      p(class = "metric-label", "Responses Today")
    ),
    
    div(class = "metric-box",
      h3(class = "metric-number", responses_7days),
      p(class = "metric-label", "Last 7 Days")
    )
  )
} else {
  div(
    h4("No Data Available"),
    p("Please upload survey data to view metrics.")
  )
}
```

## Participant Demographics

```{r}
#| label: demographics
if (nrow(survey_data) > 0 && "Role_Clean" %in% names(survey_data)) {
  role_data <- survey_data %>%
    filter(!is.na(Role_Clean)) %>%
    count(Role_Clean, sort = TRUE) %>%
    mutate(percentage = round(n / sum(n) * 100, 1))
  
  if (nrow(role_data) > 0) {
    plot_ly(role_data, 
             x = ~reorder(Role_Clean, n), y = ~n,
             type = 'bar',
             text = ~paste0(n, " (", percentage, "%)"),
             textposition = 'outside',
             marker = list(color = '#3498DB')) %>%
      layout(
        title = "Participant Roles",
        xaxis = list(title = "Role"),
        yaxis = list(title = "Number of Responses"),
        margin = list(l = 100, r = 20, t = 50, b = 100)
      )
  }
}
```

## Response Progress Over Time

```{r}
#| label: progress-chart
if (nrow(survey_data) > 0 && "RecordedDate" %in% names(survey_data)) {
  daily_data <- survey_data %>%
    group_by(RecordedDate) %>%
    summarise(
      total = n(),
      completed = sum(Finished, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    arrange(RecordedDate) %>%
    mutate(
      cumulative_total = cumsum(total),
      cumulative_completed = cumsum(completed)
    )
  
  if (nrow(daily_data) > 0) {
    plot_ly(daily_data) %>%
      add_trace(x = ~RecordedDate, y = ~cumulative_total, 
                type = 'scatter', mode = 'lines+markers',
                name = 'Total Responses', line = list(color = '#2E86C1')) %>%
      add_trace(x = ~RecordedDate, y = ~cumulative_completed,
                type = 'scatter', mode = 'lines+markers', 
                name = 'Completed', line = list(color = '#28B463')) %>%
      layout(
        title = "Cumulative Response Progress",
        xaxis = list(title = "Date"),
        yaxis = list(title = "Cumulative Responses"),
        hovermode = 'x unified'
      )
  }
}
```

# Response Analysis

## Prior Experience with Catatonia

```{r}
#| label: experience-analysis
if (nrow(survey_data) > 0) {
  # Prior knowledge
  if ("Q2_Heard_Of_Catatonia" %in% names(survey_data)) {
    heard_data <- survey_data %>%
      filter(!is.na(Q2_Heard_Of_Catatonia)) %>%
      count(Q2_Heard_Of_Catatonia) %>%
      mutate(percentage = round(n / sum(n) * 100, 1))
    
    if (nrow(heard_data) > 0) {
      plot_ly(heard_data, labels = ~Q2_Heard_Of_Catatonia, values = ~n, 
              type = 'pie',
              textinfo = 'label+percent',
              textposition = 'inside') %>%
        layout(title = "Prior Knowledge of Catatonia in ID")
    }
  }
}
```

## Content Preferences

```{r}
#| label: content-preferences
if (nrow(survey_data) > 0) {
  # Look for content preference columns
  content_cols <- names(survey_data)[str_starts(names(survey_data), "Q5_Include_")]
  
  if (length(content_cols) > 0) {
    content_summary <- survey_data %>%
      select(all_of(content_cols)) %>%
      summarise(across(everything(), ~sum(., na.rm = TRUE))) %>%
      pivot_longer(everything(), names_to = "Content", values_to = "Count") %>%
      mutate(
        Content_Label = str_remove(Content, "Q5_Include_") %>%
          str_replace_all("_", " ") %>%
          str_to_title(),
        Percentage = round(Count / nrow(survey_data) * 100, 1)
      ) %>%
      arrange(desc(Count))
    
    if (nrow(content_summary) > 0) {
      plot_ly(content_summary,
               y = ~reorder(Content_Label, Count), x = ~Count,
               type = 'bar', orientation = 'h',
               text = ~paste0(Count, " (", Percentage, "%)"),
               textposition = 'outside',
               marker = list(color = '#9B59B6')) %>%
        layout(
          title = "Most Requested Content for Handout",
          xaxis = list(title = "Number of Responses"),
          yaxis = list(title = ""),
          margin = list(l = 150, r = 50, t = 50, b = 50)
        )
    }
  }
}
```

# Data Export Information

## Available Datasets

```{r}
#| label: export-info
div(
  style = "padding: 20px; background-color: #f8f9fa; border-radius: 8px; margin: 10px 0;",
  
  h4("Research Data Access"),
  
  p("The following datasets are available for statistical analysis:"),
  
  tags$ul(
    tags$li(strong("Anonymized Survey Data: "), "Complete responses with all PII removed"),
    tags$li(strong("Summary Statistics: "), "Aggregated metrics and key findings"),
    tags$li(strong("Variable Codebook: "), "Definitions and coding schemes for all variables"),
    tags$li(strong("Quality Control Report: "), "Missing data patterns and completion metrics")
  ),
  
  br(),
  
  p(strong("Data Privacy: "), "All personally identifiable information has been removed. Only aggregated, anonymized data is included in analysis files."),
  
  p(strong("Access: "), "Contact the research team for analysis-ready datasets in SPSS, R, or Stata formats."),
  
  br(),
  
  div(
    style = "font-size: 0.9em; color: #666;",
    p(strong("Last Updated: "), format(Sys.time(), "%B %d, %Y at %I:%M %p")),
    p(strong("Total Responses: "), total_responses),
    p(strong("Completion Rate: "), paste0(completion_rate, "%"))
  )
)
```

## Variable Codebook

```{r}
#| label: codebook-preview
if (nrow(survey_data) > 0) {
  # Create a sample codebook
  codebook_sample <- tibble(
    Variable = names(survey_data)[1:min(10, ncol(survey_data))],
    Description = case_when(
      Variable == "ResponseId" ~ "Unique anonymous response identifier",
      Variable == "Progress" ~ "Percentage of survey completed (0-100)",
      Variable == "Finished" ~ "Whether survey was completed (TRUE/FALSE)",
      Variable == "RecordedDate" ~ "Date of response",
      Variable == "Q1_Main_Role" ~ "Primary role/relationship to topic",
      Variable == "Q2_Heard_Of_Catatonia" ~ "Prior knowledge of catatonia in ID",
      Variable == "Q3_Cared_For_Someone" ~ "Experience caring for someone with catatonia",
      str_starts(Variable, "Q5_") ~ "Content preference (binary: 1=selected, 0=not selected)",
      str_starts(Variable, "Q10_") ~ "Format preference (binary: 1=selected, 0=not selected)",
      TRUE ~ "Survey response variable"
    ),
    Type = case_when(
      Variable %in% c("Progress", "Duration") ~ "Numeric",
      Variable == "Finished" ~ "Logical",
      Variable == "RecordedDate" ~ "Date",
      str_starts(Variable, "Q5_") | str_starts(Variable, "Q10_") ~ "Binary",
      TRUE ~ "Categorical"
    )
  )
  
  reactable(
    codebook_sample,
    columns = list(
      Variable = colDef(name = "Variable", width = 200),
      Description = colDef(name = "Description"),
      Type = colDef(name = "Data Type", width = 100)
    ),
    striped = TRUE,
    highlight = TRUE,
    borderless = TRUE
  )
} else {
  p("Codebook will be available once survey data is loaded.")
}
```
